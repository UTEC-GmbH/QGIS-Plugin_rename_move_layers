"""*******************************************************************
***************************************************************************
 MoveLayersToGPKG
                                 A QGIS plugin
 This plugin renames selected layers (if they are nested in groups)
 and moves them to a new GeoPackage or adds them to an existing one.

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder
                              -------------------
        begin                : 2025-03-04
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Florian Ludwig
        email                : lasinludwig@gmail.com
 ***************************************************************************

***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************
"""

from pathlib import Path
from typing import Any

from qgis.core import Qgis, QgsLayerTreeGroup, QgsProject
from qgis.gui import QgisInterface
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction


class MoveLayersToGPKG:
    """QGIS Plugin for renaming and moving layers to a GeoPackage."""

    def __init__(self, iface: QgisInterface) -> None:
        """Initialize the MoveLayersToGPKG plugin.

        :param iface: An interface instance that allows interaction with QGIS.
        """

        self.iface: QgisInterface = iface
        self.plugin_dir: Path = Path(__file__).parent
        self.actions: list = []
        self.menu: str = "Move Layers to GeoPackage"
        self.dlg = None

    def add_action(
        self,
        icon_path: str,
        text: str,  # type: ignore
        callback: Any,
        enabled_flag: bool = True,
        add_to_menu: bool = True,
        add_to_toolbar: bool = True,
        status_tip: str | None = None,
        whats_this: str | None = None,
        parent: Any | None = None,
    ) -> QAction:
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file path
            (e.g. '/path/to/icon.png').
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should (and should
            not) be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should (and
            should not) be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Text that should be shown in a status bar when
            the mouse pointer hovers over the action. For menus and toolbars,
            this is often longer explanation text.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Text document that goes into the 'whatsThis' help
            section.
        :type whats_this: str

        :returns: The action that was created. As a widget, this can be added
            to menus and toolbars.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # TODO: parent parameter of addAction is expected to be 'QToolBar'
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Set up GUI and connect signals.

        Called when the plugin is loaded according to the plugin QGIS metadata.
        """

        # Create action that will start plugin configuration
        self.icon_path = ":/plugins/QGIS_plugin_move_layers_to_gpkg/icon.png"
        action = self.add_action(
            self.icon_path,
            text="Rename Selected Layer to Group Name",
            callback=self.rename_selected_layer,
            parent=self.iface.mainWindow(),
            status_tip="Rename the selected layer to its parent group name (if in a group)",
            whats_this="This action renames the currently selected layer in the layer panel to the name of its parent group, useful after DXF import.",
        )

        self.actions.append(action)

    def unload(self):
        """Plugin unload method.

        Called when the plugin is unloaded according to the plugin QGIS metadata.
        """
        # Remove toolbar actions and menu items
        for action in self.actions:
            self.iface.removePluginMenu("Move Layers to GeoPackage", action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs some action when the plugin is activated."""
        # Implement your plugin logic here
        # This is where the code for moving layers to a GeoPackage should go

    def rename_selected_layer(self):
        """Renames the currently selected layer to its parent group name.
        This method is called when the user clicks the plugin action.
        """
        layer = self.iface.activeLayer()  # Get the currently selected layer
        if layer is None:
            self.iface.messageBar().pushMessage(
                "Warning", "No layer selected.", level=Qgis.Warning
            )
            return

        layer_tree_node = QgsProject.instance().layerTreeRoot().findLayer(layer.id())
        if layer_tree_node:
            parent_group = layer_tree_node.parent()
            if isinstance(parent_group, QgsLayerTreeGroup):
                group_name = parent_group.name()
                current_layer_name = layer.name()
                new_layer_name = group_name
                layer.setName(new_layer_name)
                self.iface.messageBar().pushMessage(
                    "Info",
                    f"Layer '{current_layer_name}' renamed to '{new_layer_name}' (Group: '{group_name}').",
                    level=Qgis.Info,
                )
            else:
                self.iface.messageBar().pushMessage(
                    "Warning",
                    "Selected layer is not within a group.",
                    level=Qgis.Warning,
                )
        else:
            self.iface.messageBar().pushMessage(
                "Error", "Could not find layer in layer tree.", level=Qgis.Critical
            )
