"""*******************************************************************
***************************************************************************
 MoveLayersToGPKG
                                 A QGIS plugin
 This plugin renames selected layers (if they are nested in groups)
 and moves them to a new GeoPackage

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder
                              -------------------
        begin                : 2025-03-04
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Florian Ludwig
        email                : lasinludwig@gmail.com
 ***************************************************************************

***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************
"""

import os.path

from qgis import Qgis
from qgis.PyQt.QtCore import QCoreApplication, QSettings, QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Import the code for the dialog
# Initialize Qt resources from file resources.py
from .resources import *


class MoveLayersToGPKG:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # locale path
        locale_path = os.path.join(
            self.plugin_dir, "i18n", f"MyPlugin_{QLocale.system().name()}.qm"
        )
        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&My Plugin")

        # Initialize locale
        locale = QLocale()
        QSettings().setValue("locale/ui", locale.name())
        if QCoreApplication.instance().testAttribute(Qt.AA_Use96DpiScaling):
            translator = QTranslator()
            translator.load(locale_path)
            QCoreApplication.instance().installTranslator(translator)

        # Declare instance attributes
        self.dlg = None  # Keep this if you still use the dialog
        self.pluginIsActive = False

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        Context for translation will be 'MyPlugin' plugin.

        :param message: String to be translated.
        :type message: str, unicode

        :returns: Translated version of message.
        :rtype: QString
        """
        # Commented out due to Plugin Builder issue with generating proper 'lupdate'
        # return QCoreApplication.translate('MyPlugin', message)
        return message

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file path
            (e.g. '/path/to/icon.png').
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should (and should
            not) be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should (and
            should not) be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Text that should be shown in a status bar when
            the mouse pointer hovers over the action. For menus and toolbars,
            this is often longer explanation text.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Text document that goes into the 'whatsThis' help
            section.
        :type whats_this: str

        :returns: The action that was created. As a widget, this can be added
            to menus and toolbars.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # TODO: parent parameter of addAction is expected to be 'QToolBar'
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Set up GUI and connect signals.

        Called when the plugin is loaded according to the plugin QGIS metadata.
        """

        # Create action that will start plugin configuration
        self.icon_path = ":/plugins/my_plugin/icon.png"
        action = self.add_action(
            self.icon_path,
            text=self.tr("Rename Selected Layer to Group Name"),
            callback=self.rename_selected_layer,  # Changed callback function
            parent=self.iface.mainWindow(),
            status_tip=self.tr(
                "Rename the selected layer to its parent group name (if in a group)"
            ),
            whats_this=self.tr(
                "This action renames the currently selected layer in the layer panel to the name of its parent group, useful after DXF import."
            ),
        )

        self.actions.append(action)

        # No longer connecting to layersAdded signal for automatic renaming

    def unload(self):
        """Plugin unload method.

        Called when the plugin is unloaded according to the plugin QGIS metadata.
        """
        # Remove toolbar actions and menu items
        for action in self.actions:
            self.iface.removePluginMenu(self.tr("&My Plugin"), action)
            self.iface.removeToolBarIcon(action)
        # No longer disconnecting layer added signal

    def run(
        self,
    ):  # Keep this run method if you still need the dialog, otherwise remove
        """Plugin главная run method.

        Called when the plugin is activated (e.g. when its toolbar button is clicked).
        """
        if not self.pluginIsActive:
            self.pluginIsActive = True

            # Create the dialog if it's not been created yet
            if self.dlg is None:
                self.dlg = MyPluginDialog()

            # show the dialog
            self.dlg.show()
            # Run dialog
            result = self.dlg.exec_()
            # See if OK was pressed
            if result == QDialog.Accepted:
                # do something useful here - delete the line containing pass and
                # substitute with your code
                pass

            self.pluginIsActive = False

    def rename_selected_layer(self):
        """This method is called when the user clicks the plugin action.
        It renames the currently selected layer to its parent group name.
        """
        layer = self.iface.activeLayer()  # Get the currently selected layer
        if layer is None:
            self.iface.messageBar().pushMessage(
                "Warning", "No layer selected.", level=Qgis.Warning
            )
            return

        layer_tree_node = QgsProject.instance().layerTreeRoot().findLayer(layer.id())
        if layer_tree_node:
            parent_group = layer_tree_node.parent()
            if isinstance(parent_group, QgsLayerTreeGroup):
                group_name = parent_group.name()
                current_layer_name = layer.name()
                new_layer_name = group_name
                layer.setLayerName(new_layer_name)
                self.iface.messageBar().pushMessage(
                    "Info",
                    f"Layer '{current_layer_name}' renamed to '{new_layer_name}' (Group: '{group_name}').",
                    level=Qgis.Info,
                )
            else:
                self.iface.messageBar().pushMessage(
                    "Warning",
                    "Selected layer is not within a group.",
                    level=Qgis.Warning,
                )
        else:
            self.iface.messageBar().pushMessage(
                "Error", "Could not find layer in layer tree.", level=Qgis.Critical
            )
