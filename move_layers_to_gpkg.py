"""*******************************************************************
***************************************************************************
 RenameAndMoveLayersToGPKG
                                 A QGIS plugin
 This plugin renames selected layers (if they are nested in groups)
 and moves them to a new GeoPackage or adds them to an existing one.

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder
                              -------------------
        begin                : 2025-03-04
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Florian Ludwig
        email                : lasinludwig@gmail.com
 ***************************************************************************

***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************
"""

from pathlib import Path
from typing import Callable

from qgis.core import (
    Qgis,
    QgsLayerTreeGroup,
    QgsLayerTreeLayer,
    QgsMapLayer,
    QgsProject,
)
from qgis.gui import QgisInterface
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

from . import resources  # noqa: F401
from .move_layers_to_gpkg_dialog import MoveLayersToGPKGDialog


class RenameAndMoveLayersToGPKG:
    """QGIS Plugin for renaming and moving layers to a GeoPackage."""

    def __init__(self, iface: QgisInterface) -> None:
        """Initialize the RenameAndMoveLayersToGPKG plugin.

        :param iface: An interface instance that allows interaction with QGIS.
        """

        self.iface: QgisInterface = iface
        self.plugin_dir: Path = Path(__file__).parent
        self.actions: list = []
        self.menu: str = "Move Layers to GeoPackage"
        self.dlg = None
        self.icon_path = ":/plugins/QGIS_plugin_move_layers_to_gpkg/icon.png"

    def add_action(
        self,
        icon_path: str,
        text: str,
        callback: Callable,
        enabled_flag: bool = True,
        add_to_menu: bool = True,
        add_to_toolbar: bool = True,
        status_tip: str | None = None,
        whats_this: str | None = None,
        parent=None,
    ) -> QAction:
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file path
            (e.g. '/path/to/icon.png').
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should (and should
            not) be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should (and
            should not) be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Text that should be shown in a status bar when
            the mouse pointer hovers over the action. For menus and toolbars,
            this is often longer explanation text.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Text document that goes into the 'whatsThis' help
            section.
        :type whats_this: str

        :returns: The action that was created. As a widget, this can be added
            to menus and toolbars.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self) -> None:  # noqa: N802
        """Set up GUI and connect signals.

        Called when the plugin is loaded according to the plugin QGIS metadata.
        """

        self.add_action(
            self.icon_path,
            text=self.menu,
            callback=self.run,
            parent=self.iface.mainWindow(),
            status_tip=f"Open the {self.menu} dialog",
            whats_this=f"This opens the {self.menu} dialog.",
        )

    def unload(self) -> None:
        """Plugin unload method.

        Called when the plugin is unloaded according to the plugin QGIS metadata.
        """
        # Remove toolbar actions and menu items
        for action in self.actions:
            self.iface.removePluginMenu("Move Layers to GeoPackage", action)
            self.iface.removeToolBarIcon(action)

    def run(self) -> None:
        """Run method that opens the plugin dialog."""

        if self.dlg is None:
            self.dlg = MoveLayersToGPKGDialog(
                plugin=self, parent=self.iface.mainWindow()
            )

        # Show the dialog
        self.dlg.show()

    def get_selected_layers(self) -> list[QgsMapLayer]:
        """Collect all layers selected in the plugin UI.

        :returns: A list of selected QgsMapLayer objects.
        """
        selected_layers = set()
        selected_nodes = self.dlg.Layer_Tree_FL.selectedNodes()

        for node in selected_nodes:
            if isinstance(node, QgsLayerTreeGroup):
                # If a group is selected, add all its layers recursively.
                for layer_node in node.findLayers():
                    selected_layers.add(layer_node.layer())
            elif isinstance(node, QgsLayerTreeLayer):
                # Add the single selected layer.
                selected_layers.add(node.layer())

        return list(selected_layers)

    def rename_selected_layers(self) -> None:
        """Rename the selected layers to their parent group names.

        Process all selected layers and provides a single summary message at the end.
        """
        layers_to_process = self.get_selected_layers()
        if not layers_to_process:
            self.iface.messageBar().pushMessage(
                "Warning", "No layers or groups selected.", level=Qgis.Warning
            )
            return

        # --- 1. Gather information and plan actions ---
        rename_plan = []  # List of (layer, old_name, new_name)
        skipped_layers = []  # List of layer names that are not in a group
        error_layers = []  # List of layer names that could not be found

        root = QgsProject.instance().layerTreeRoot()

        for layer in layers_to_process:
            node = root.findLayer(layer.id())
            if not node:
                error_layers.append(layer.name())
                continue

            parent = node.parent()
            if isinstance(parent, QgsLayerTreeGroup):
                group_name = parent.name()
                current_name = layer.name()

                # Fix for encoding issues (mojibake) where UTF-8 characters are
                # incorrectly decoded as a single-byte encoding like latin-1.
                # This re-encodes the string to bytes and then decodes it correctly.
                new_name = group_name.encode("latin-1").decode("utf-8", "ignore")

                if current_name != new_name:
                    rename_plan.append((layer, current_name, new_name))
            else:
                skipped_layers.append(layer.name())

        # --- 2. Execute actions ---
        for layer, _, new_name in rename_plan:
            layer.setName(new_name)

        # --- 3. Report summary ---
        if not any([rename_plan, skipped_layers, error_layers]):
            self.iface.messageBar().pushMessage(
                "Info",
                "All selected layers already have the correct names.",
                level=Qgis.Info,
                duration=5,
            )
            return

        message_parts = []
        level = Qgis.Success
        if rename_plan:
            message_parts.append(f"Renamed {len(rename_plan)} layer(s).")
        if skipped_layers:
            message_parts.append(
                f"Skipped {len(skipped_layers)} layer(s) not in a group."
            )
            level = Qgis.Warning
        if error_layers:
            message_parts.append(
                f"Could not find {len(error_layers)} layer(s) in the layer tree."
            )
            level = Qgis.Critical

        self.iface.messageBar().pushMessage(
            "Rename Complete", " ".join(message_parts), level=level, duration=10
        )
