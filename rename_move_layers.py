"""*******************************************************************
***************************************************************************
 RenameAndMoveLayersToGPKG
                                 A QGIS plugin
 This plugin renames selected layers (if they are nested in groups)
 and moves them to a new GeoPackage or adds them to an existing one.

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder
                              -------------------
        begin                : 2025-03-04
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Florian Ludwig
        email                : lasinludwig@gmail.com
 ***************************************************************************

***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************
"""

from pathlib import Path
from typing import Callable

from qgis.gui import QgisInterface
from qgis.PyQt.QtGui import QIcon  # type: ignore[reportAttributeAccessIssue]
from qgis.PyQt.QtWidgets import (
    QAction,
    QMenu,  # type: ignore[reportAttributeAccessIssue]
    QToolButton,  # type: ignore[reportAttributeAccessIssue]
)

from . import resources  # noqa: F401 - Import is necessary to load resources
from .modules.functions_geopackage import move_layers_to_gpkg
from .modules.functions_rename import rename_layers


class RenameAndMoveLayersToGPKG:
    """QGIS Plugin for renaming and moving layers to a GeoPackage."""

    def __init__(self, iface: QgisInterface) -> None:
        """Initialize the RenameAndMoveLayersToGPKG plugin.

        :param iface: An interface instance that allows interaction with QGIS.
        """

        self.iface: QgisInterface = iface
        self.plugin_dir: Path = Path(__file__).parent
        self.actions: list = []
        # Using a shorter name for the menu for a cleaner look
        self.menu: str = "Layer Tools"
        self.plugin_menu: QMenu | None = None
        self.dlg = None
        self.icon_path = ":/plugins/rename_move_layers/icon.png"

    def add_action(
        self,
        icon_path: str,
        text: str,
        callback: Callable,
        enabled_flag: bool = True,
        add_to_menu: bool = True,
        add_to_toolbar: bool = True,
        status_tip: str | None = None,
        whats_this: str | None = None,
        parent=None,
    ) -> QAction:
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file path
            (e.g. '/path/to/icon.png').
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should (and should
            not) be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should (and
            should not) be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Text that should be shown in a status bar when
            the mouse pointer hovers over the action. For menus and toolbars,
            this is often longer explanation text.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Text document that goes into the 'whatsThis' help
            section.
        :type whats_this: str

        :returns: The action that was created. As a widget, this can be added
            to menus and toolbars.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self) -> None:  # noqa: N802
        """Create the menu entries and toolbar icons for the plugin."""
        # Create a menu for the plugin in the "Plugins" menu
        self.plugin_menu = QMenu(self.menu, self.iface.pluginMenu())
        self.plugin_menu.setIcon(QIcon(self.icon_path))

        # Add an action for renaming layers
        rename_action = self.add_action(
            self.icon_path,
            text="Rename Layers by Group",
            callback=self.rename_selected_layers,
            parent=self.iface.mainWindow(),
            add_to_menu=False,  # Will be added to our custom menu
            add_to_toolbar=False,  # Avoid creating a separate toolbar button
            status_tip="Rename selected layers to their parent group names",
            whats_this="Renames selected layers to match their parent group's name.",
        )
        self.plugin_menu.addAction(rename_action)

        # Add an action for moving layers
        move_action = self.add_action(
            self.icon_path,
            text="Move Layers to GeoPackage",
            callback=self.move_selected_layers,
            parent=self.iface.mainWindow(),
            add_to_menu=False,  # Added to custom menu
            add_to_toolbar=False,
            status_tip="Move selected layers to the project's GeoPackage",
            whats_this=(
                "Copies selected layers to a GeoPackage and "
                "adds them back from the GeoPackage."
            ),
        )
        self.plugin_menu.addAction(move_action)

        # Add an action for renaming and moving layers
        rename_move_action = self.add_action(
            self.icon_path,
            text="Rename Layers and Move them to GeoPackage",
            callback=self.rename_and_move_layers,
            parent=self.iface.mainWindow(),
            add_to_menu=False,  # Added to custom menu
            add_to_toolbar=False,
            status_tip="Rename and move selected layers to the project's GeoPackage",
            whats_this=(
                "Renames the selected layers to their parent group names, "
                "then copies them to the project's GeoPackage and "
                "adds them back from the GeoPackage."
            ),
        )
        self.plugin_menu.addAction(rename_move_action)

        # Add the fly-out menu to the main "Plugins" menu
        self.iface.pluginMenu().addMenu(self.plugin_menu)
        # Add a toolbutton to the toolbar to show the flyout menu
        toolbar_button = QToolButton()
        toolbar_button.setMenu(self.plugin_menu)
        toolbar_button.setDefaultAction(rename_action)  # Use an action's icon
        toolbar_button.setPopupMode(QToolButton.InstantPopup)
        self.iface.addToolBarWidget(toolbar_button)
        self.actions.append(toolbar_button)  # Keep track of it for removal

    def unload(self) -> None:
        """Plugin unload method.

        Called when the plugin is unloaded according to the plugin QGIS metadata.
        """
        # Remove toolbar icons for all actions
        for action in self.actions:
            if isinstance(action, (QAction, QToolButton)):
                self.iface.removeToolBarIcon(action)

        # Remove the plugin menu from the "Plugins" menu.
        # Remove the menu, which will automatically remove its actions.
        if self.plugin_menu:
            self.iface.pluginMenu().removeAction(self.plugin_menu.menuAction())

        self.actions.clear()
        self.plugin_menu = None

    def rename_selected_layers(self) -> None:
        """Call rename function from 'functions_rename.py'."""

        rename_layers(self)

    def move_selected_layers(self) -> None:
        """Call move function from 'functions_geopackage.py'."""

        move_layers_to_gpkg(self)

    def rename_and_move_layers(self) -> None:
        """Combine the rename and move functions."""

        rename_layers(self)
        move_layers_to_gpkg(self)
